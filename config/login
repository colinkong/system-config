#
# $HOME/.login for csh/tcsh shells
#
# 1) Create "$HOME/.login-2bash" to auto switch to bash shell
# 2) Create "$HOME/.login-local" for local settings
#

##set verbose

if ( ! $?TERM ) then
    setenv TERM ""
endif
if ( "$TERM" != "" && "$TERM" != dumb ) then
    if ( -f $HOME/.login-2bash && -f /bin/bash ) then
        setenv ENV $HOME/.profile
        exec /bin/bash -l
    endif
    if ( "$TERM" == "xterm-256color" ) then
        setenv TERM xterm
    endif

    # Terminal Multiplexer
    if ( "`tmux -V |& \grep '^tmux '`" != "" ) then
        if ( $?TMUX ) then
            if ( ! $?MYSCREEN ) then
                setenv MYSCREEN "tmux:`timeout --signal=KILL 1 tmux display-message -p '#S'`"
                setenv MYTTY ""
            endif
        else if ( "$TERM" == "screen" ) then
            setenv MYSCREEN "???"
            alias tmux='echo "sessions should be nested with care, already running multiplexer" #'
        endif
    endif

    # Removing soft shell limit
    foreach _limit ( `limit | \grep -E -v "coredumpsize|unlimited|-" | \awk '{print $1}'` )
        if ( "`limit $_limit unlimited`" == "" ) then
            limit $_limit unlimited
        endif
    end
    unsetenv _limit

    # Session control
    setenv MYHNAME `uname -n | tr '[A-Z]' '[a-z]' | cut -f1 -d"."`
    setenv MYUNAME `whoami |& grep -v "not found"`
    if ( "$MYUNAME" == "" ) then
        setenv MYUNAME `id -un`
    endif
    if ( $?tcsh ) then
        setenv MYSHELL "TCSH"
        set prompt="%{\033[01;32m%}[%P] %{\033[01;34m%}%~%{\n%}%{\033[01;32m%}%n@$MYHNAME%{\033[00m%} % "
    else
        setenv MYSHELL "CSH"
        set prompt="$MYUNAME@${MYHNAME}% "
    endif

    # Setup SSH agent
    if ( $?SSH_AUTH_SOCK ) then
        if ( ! -e "$SSH_AUTH_SOCK" ) then
            unsetenv SSH_AUTH_SOCK
        endif
    endif
    if ( ! $?SSH_AUTH_SOCK ) then
        if ( "`ps -u $MYUNAME |& grep ssh-agent`" != "" ) then
            find /tmp/ssh-* /var/folders/*/*/*/ssh-* -type d -user $MYUNAME -exec rm -rf {} + >& /dev/null
        endif
        setenv SSH_AUTH_SOCK `/bin/sh -c "\ls -1t /tmp/ssh-*/* /var/folders/*/*/*/ssh-*/* 2> /dev/null | head -1"`
        if ( "$SSH_AUTH_SOCK" != "" ) then
            ln -s `dirname $SSH_AUTH_SOCK` /tmp >& /dev/null
        else
            eval `ssh-agent -c` >& /dev/null
        endif
    endif
    setenv SSH_KEYS `ssh-add -l |& grep ".:." | wc -l | awk '{print $1}'`

    # Setup terminal
    if ( ! $?MYTTY ) then
        setenv MYTTY ""
    endif
    if ( "$MYTTY" != "`\tty`" ) then
        setenv MYTTY `\tty`
        setenv GPG_TTY "$MYTTY"
        (mesg n) >& /dev/null
        set autologout=0
        stty erase "^?"  #  alternative
        stty intr 
        stty susp 
        if ( $?SSH_CONNECTION ) then
            setenv MYSHELL "$MYSHELL remote"
            alias exit 'echo Use \"logout\" to disconnect login shell.'
        else if ( $?SUDO_COMMAND ) then
            setenv MYSHELL "$MYSHELL sudo"
        else
            setenv MYSHELL "$MYSHELL login"
            alias exit 'echo Use \"logout\" to close login shell.'
        endif
        alias exec ""
    endif

    # Use /tmp (tmpfs) for cache
    setenv TMPDIR "/tmp/$MYUNAME"
    setenv TMP "/tmp/$MYUNAME"
    (rm -f `find $HOME/.???* -xdev -type l | xargs -r -d '\n' ls -ld | \
        grep " -> /tmp" | grep -v " -> /tmp/$MYUNAME/" | sed -e "s/ ->.*//;s/.* //"`) >& /dev/null
    mkdir -p $TMP/.cache
    if ( ! -l $HOME/.cache ) then
        rm -rf $HOME/.cache >& /dev/null
        ln -s $TMP/.cache $HOME/.cache >& /dev/null
    endif

    # Protect files
    switch ($MYUNAME)
    case root:
    case admin:
        ls -ld $HOME | grep -v "rwx------" | awk '{print $NF}' | xargs -n 1 chmod 700 >& /dev/null
        breaksw
    default:
        ls -ld $HOME | grep -v "rwx--x--x" | awk '{print $NF}' | xargs -n 1 chmod 711 >& /dev/null
        breaksw
    endsw

    # General stuff
    umask 022
    setenv LC_COLLATE C
    setenv EDITOR vi
    setenv LESSHISTFILE /dev/null
    setenv PYTHONDONTWRITEBYTECODE 1
    set history=256

    # Save/load default path settings
    if ( ! $?BASE_PATH ) then
        if ( ! $?MANPATH ) then
            setenv MANPATH :
        endif
        if ( ! $?LM_LICENSE_FILE ) then
            setenv LM_LICENSE_FILE :
        endif
        if ( ! $?LD_LIBRARY_PATH ) then
            setenv LD_LIBRARY_PATH :
        endif
        setenv BASE_PATH "$PATH"
        setenv BASE_LD_LIBRARY_"PATH $LD_LIBRARY_PATH"
        setenv BASE_PYTHONPATH "$PYTHONPATH"
        setenv BASE_MANPATH "$MANPATH"
    else
        setenv PATH "$BASE_PATH"
        setenv LD_LIBRARY_PATH "$BASE_LD_LIBRARY_PATH"
        setenv PYTHONPATH "$BASE_PYTHONPATH"
        setenv MANPATH "$BASE_MANPATH"
    endif
    if ( "$MYUNAME" == root && "`echo :${PATH}: | grep :/sbin:`" == "") then
    then
        setenv PATH /sbin:$PATH
    endif

    # Fix command aliases
    if ( "`which ssudo |& \grep '/ssudo'`" != "" ) then
        alias sudo ssudo
    endif
    if ( "`which htop |& \grep '/htop'`" != "" ) then
        alias top htop
    endif
    alias df "df -k"
    alias du "du -k"
    alias ftp "ftp -i -v"
    alias h history 256
    alias ls "ls -C"
    alias quota "quota -v"
    if ( -x /usr/bin/vim ) then
        alias vi "vim -N -n -i NONE -T xterm"
        rm -f $HOME/.viminfo
    endif
    if ( -x /usr/sbin/ping ) then
        alias ping "/usr/sbin/ping"
    else if ( -x /usr/etc/ping ) then
        alias ping "/usr/etc/ping"
    endif
    if ( -f "$HOME/.ssh/config" ) then
        if ( "`\ssh -version |& \grep '^OpenSSH_'`" != "" ) then
            alias scp "scp -F $HOME/.ssh/config -o ServerAliveInterval=1799"
        else
            alias scp "scp -F $HOME/.ssh/config"
        endif
    endif
    unalias cp cd.. d l ll la lsd mv p rm s which >& /dev/null

    # mk[0-9a-z], cd[0-9a-z], scd
    foreach _dir (0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z)
        alias mk$_dir 'cd "$PWD" && setenv cd'$_dir' "$PWD" && echo "cd'$_dir'=$PWD"'
        alias cd$_dir 'echo cd \"$cd'$_dir'\" && cd "$cd'$_dir'"'
    end
    unsetenv _dir
    alias scd 'env | grep "^cd[0-9a-z]=." | sort'

    # Platform specific
    switch (`uname`)
    case Darwin:
        if ( "`\ls --help |& \grep '^ *--time-style'`" != "" ) then
            alias ls "ls -C --time-style=long-iso --color=auto"
            alias grep "grep --color=auto"
        else
            alias ls "ls -C -G"
        endif
        breaksw

    case HP-UX:
        alias df "bdf"
        breaksw

    case Linux:
    case *NT*:
        if ( "`\ls --help |& \grep '^ *--time-style'`" != "" ) then
            alias ls "ls -C --time-style=long-iso --color=auto"
        else
            alias ls "ls -C --color=auto"
        endif
        if ( "`\grep --help |& \grep ' --color'`" != "" ) then
            alias grep "grep --color=auto"
        endif
        setenv LS_COLORS ""
        breaksw
    endsw
    setenv PATH "$HOME/software/scripts:$HOME/software/bin:/opt/software/bin:$PATH"
    if ( $?VIRTUAL_ENV ) then
    then
        setenv PATH "$VIRTUAL_ENV/bin:$PATH"
    endif

    # Change to $HOME/Desktop
    if ( "$PWD" == "$HOME" || "$PWD" == "/" ) then
        mkdir -p $HOME/Desktop/Downloads >& /dev/null
        cd "$HOME/Desktop" >& /dev/null
    endif

    # Applying optional settings
    if ( -f $HOME/.login-opt ) then
        source $HOME/.login-opt
    endif

    # Show information
    echo
    sysinfo -s |& grep -v "Command not found"
    setenv MYINFO "$MYSHELL shell (tty=$MYTTY)"
    if ( "$SSH_KEYS" != 0 ) then
        setenv MYINFO "$MYINFO, ssh-add=$SSH_KEYS"
    endif
    if ( $?MYSCREEN ) then
        setenv MYINFO "$MYINFO, screen=$MYSCREEN"
    endif
    setenv MYINFO "$MYINFO)"
    echo "$MYINFO"
    echo

endif
